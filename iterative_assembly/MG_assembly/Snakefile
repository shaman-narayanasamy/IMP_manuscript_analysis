import os

# Take the current step and calculate next step target
STEP = os.environ.get("STEP", "1")
STEPp1 = int(STEP) + 1

configfile: "config.iterative_MG.json"
#configfile: "../config.imp.json"

## Parameters required from the config file
MEMCORE = os.environ.get("MEMCORE", config['memory_per_core_gb'])
THREADS = os.environ.get("THREADS", config['threads'])

## Input and output parameters
OUT_LOG = os.environ.get("OUT_LOG", "/scratch/users/snarayanasamy/test_data-iterative_MG/iterative_MG.log")
INPUT_DIR = os.environ.get("INPUT_DIR", "/scratch/users/snarayanasamy/test_output/Preprocessing")
OUT_DIR = os.environ.get("OUT_DIR", "/scratch/users/snarayanasamy/test_data-iterative_MG")
TMP = os.environ.get("TMP", "/scratch/users/snarayanasamy/test_data-iterative_MG/tmp")

### General rule for the iterative assemblies ###
rule ALL:
    input:
        "%s/MG_contigs_merged_%s.fa" % (OUT_DIR, STEPp1),
        "%s/quast_1/report.txt" % OUT_DIR,
        "%s/quast_1/report.tsv" % OUT_DIR,
        "%s/quast_1/report.tex" % OUT_DIR,
        "%s/quast_%s/report.txt" % (OUT_DIR, STEPp1),
        "%s/quast_%s/report.tsv" % (OUT_DIR, STEPp1),
        "%s/quast_%s/report.tex" % (OUT_DIR, STEPp1)
    shell:
        "echo 'DONE'"

### Rules for the initial assembly ###
rule INITIAL_ASSEMBLY:
    input:
        "%s/MG.R1.preprocessed.fq" % INPUT_DIR,
        "%s/MG.R2.preprocessed.fq" % INPUT_DIR,
        "%s/MG.SE.preprocessed.fq" % INPUT_DIR
    output:
        "%s/MG_contigs_1.fa" % OUT_DIR
    benchmark:
        "%s/benchmarks/INITIAL_ASSEMBLY.json" % OUT_DIR
    log:
        OUT_LOG
    priority: 50
    shell:
        """
        echo "[x] Running assembly {STEP} [x]"
        mkdir {TMP}

        echo "[x] Interleave MG fastq files"

        TMPD=$(mktemp -d -t --tmpdir={TMP} "XXXXXX")
        fq2fa --merge {input[0]} {input[1]} $TMPD/merged.fa

        idba_ud -r $TMPD/merged.fa \
        -l {input[2]} -o {OUT_DIR}/assembly_1 \
        --mink {config[idba_ud][mink]} --maxk {config[idba_ud][maxk]} \
        --step {config[idba_ud][step]} --num_threads {THREADS} \
        --similar {config[idba_ud][perid]} --pre_correction \
        >> {log} 2>&1

        cp {OUT_DIR}/assembly_1/contig.fa {output}
        """

rule MERGE_INITIAL_ASSEMBLY:
    input:
        "%s/MG_contigs_1.fa" % OUT_DIR,
    output:
        "%s/MG_contigs_cat_1.fa" % OUT_DIR,
        "%s/MG_contigs_merged_1.fa" % OUT_DIR
    benchmark:
        "%s/benchmarks/MERGE_INITIAL_ASSEMBLY.json" % OUT_DIR
    log:
        OUT_LOG
    shell:
        """
        echo "[x] Merging initial assembly contigs [x]"
        cat {input} > {output[0]}

        # Options should be after input file!
        cap3 {output[0]} -p 98 -o 100 \
        >> {log} 2>&1

        # Concatenate assembled contigs, singletons and rename the contigs
        cat {output[0]}.cap.contigs {output[0]}.cap.singlets | \
        awk '/^>/{{print \">contig_\" ++i; next}}{{print}}' > {output[1]}
        """

rule QUAST_INITIAL_ASSEMBLY:
    input:
        "%s/MG_contigs_cat_1.fa" % OUT_DIR,
        "%s/MG_contigs_merged_1.fa" % OUT_DIR
    output:
        "%s/quast_1/report.txt" % OUT_DIR,
        "%s/quast_1/report.tsv" % OUT_DIR,
        "%s/quast_1/report.tex" % OUT_DIR
    benchmark:
        "%s/benchmarks/QUAST_1.json" % (OUT_DIR)
    log:
        OUT_LOG
    shell:
        """
        METAQUAST="/mnt/nfs/projects/ecosystem_biology/local_tools/IMP/dependencies/quast/metaquast.py"
        python2.7 $METAQUAST -t {THREADS} -o {OUT_DIR}/quast_1 \
        {input[0]} \
        --max-ref-number 0 --no-check --fast \
        >> {log} 2>&1
         
        METAQUAST="/mnt/nfs/projects/ecosystem_biology/local_tools/IMP/dependencies/quast/metaquast.py"
        python2.7 $METAQUAST -t {THREADS} -o {OUT_DIR}/quast_1 \
        {input[1]} \
        --max-ref-number 0 --no-check --fast -f\
        >> {log} 2>&1
        """

### General rules for iterations of assemblies ###
rule EXTRACT_UNMAPPED:
    input:
        "%s/MG_contigs_merged_%s.fa" % (OUT_DIR, STEP),
        "%s/MG.R1.preprocessed.fq" % INPUT_DIR,
        "%s/MG.R2.preprocessed.fq" % INPUT_DIR,
        "%s/MG.SE.preprocessed.fq" % INPUT_DIR
    output:
        '%s/MG.R1.unmapped_%s.fq' % (OUT_DIR, STEP),
        '%s/MG.R2.unmapped_%s.fq' % (OUT_DIR, STEP),
        '%s/MG.SE.unmapped_%s.fq' % (OUT_DIR, STEP)
    benchmark:
        "%s/benchmarks/EXTRACT_UNMAPPED_%s.json" % (OUT_DIR, STEP)
    log:
        OUT_LOG
    shell:
        """
        echo "[x] Extracting unmapped from assembly {STEP} [x]"
        echo "[x] Indexing assembly {STEP} [x]"
        bwa index {input[0]}

        echo "[x] Extracting unmapped reads [x]"

        TMP_FILE=$(mktemp --tmpdir={TMP} -t "alignment_{STEP}-XXXX.bam")
        BUFFER=$(mktemp --tmpdir={TMP} -t "alignment_buffer_{STEP}-XXXX.bam")
        bwa mem -v 1 -t {THREADS} {input[0]} {input[1]} {input[2]} | samtools view -@ {THREADS} -bS - > $TMP_FILE
        samtools merge -@ {THREADS} -u - \
        <(samtools view -@ {THREADS} -u  -f 4 -F 264 $TMP_FILE) \
        <(samtools view -@ {THREADS} -u -f 8 -F 260 $TMP_FILE) \
        <(samtools view -@ {THREADS} -u -f 12 -F 256 $TMP_FILE) | \
        samtools view -@ {THREADS} -bF 0x800 -  | samtools sort -o -@ {THREADS} -m {MEMCORE}G -n - $BUFFER | \
        bamToFastq -i stdin -fq {output[0]} -fq2 {output[1]} \
        >> {log} 2>&1

        bwa mem -v 1 -t {THREADS} {input[0]} {input[3]} | \
        samtools view -@ {THREADS} -bS - | samtools view -@ {THREADS} -uf 4 - | \
        bamToFastq -i stdin -fq {output[2]} \
        >> {log} 2>&1
        """

rule ASSEMBLY:
    input:
        "%s/MG.R1.unmapped_%s.fq" % (OUT_DIR, STEP),
        "%s/MG.R2.unmapped_%s.fq" % (OUT_DIR, STEP),
        "%s/MG.SE.unmapped_%s.fq" % (OUT_DIR, STEP)
    output:
        "%s/MG_contigs_%s.fa" % (OUT_DIR, STEPp1)
    benchmark:
        "%s/benchmarks/ASSEMBLY_%s.json" % (OUT_DIR, STEPp1)
    log:
        OUT_LOG
    shell:
        """
        echo "[x] Running assembly {STEPp1} [x]"
        echo "[x] Interleave MG fastq files"
        TMPD=$(mktemp -d -t --tmpdir={TMP} "XXXXXX")
        fq2fa --merge {input[0]} {input[1]} $TMPD/merged.fa

        idba_ud -r $TMPD/merged.fa \
        -l {input[2]} -o {OUT_DIR}/assembly_{STEPp1} \
        --mink {config[idba_ud][mink]} --maxk {config[idba_ud][maxk]} \
        --step {config[idba_ud][step]} --num_threads {THREADS} \
        --similar {config[idba_ud][perid]} --pre_correction \
        >> {log} 2>&1
        
        cp {OUT_DIR}/assembly_{STEPp1}/contig.fa {output}
        """

rule MERGE_ASSEMBLIES:
    input:
        "%s/MG_contigs_merged_%s.fa" % (OUT_DIR, STEP),
        "%s/MG_contigs_%s.fa" % (OUT_DIR, STEPp1)
    output:
        "%s/MG_contigs_cat_%s.fa" % (OUT_DIR, STEPp1),
        "%s/MG_contigs_merged_%s.fa" % (OUT_DIR, STEPp1)
    benchmark:
        "%s/benchmarks/MERGE_ASSEMBLIES_%s.json" % (OUT_DIR, STEPp1)
    log:
        OUT_LOG
    shell:
        """
        echo "[x] Merging assemblies {STEP} and {STEPp1} [x]"
        NAME={OUT_DIR}/MG.assembly
        cat {input} > {output[0]}

        # Options should be after input file!
        cap3 {output[0]} -p 98 -o 100 \
        >> {log} 2>&1

        # Concatenate assembled contigs, singletons and rename the contigs
        cat {output[0]}.cap.contigs {output[0]}.cap.singlets | \
        awk '/^>/{{print \">contig_\" ++i; next}}{{print}}' > {output[1]}
        """

rule QUAST:
    input:
        "%s/MG_contigs_cat_%s.fa" % (OUT_DIR, STEPp1),
        "%s/MG_contigs_merged_%s.fa" % (OUT_DIR, STEPp1)
    output:
        "%s/quast_%s/report.txt" % (OUT_DIR, STEPp1),
        "%s/quast_%s/report.tsv" % (OUT_DIR, STEPp1),
        "%s/quast_%s/report.tex" % (OUT_DIR, STEPp1)
    benchmark:
        "%s/benchmarks/QUAST_%s.json" % (OUT_DIR, STEPp1)
    log:
        OUT_LOG
    shell:
        """
        METAQUAST="/mnt/nfs/projects/ecosystem_biology/local_tools/IMP/dependencies/quast/metaquast.py"
        python2.7 $METAQUAST -t {THREADS} -o {OUT_DIR}/quast_{STEPp1} \
        {input[0]} \
        --max-ref-number 0 --no-check --fast \
        >> {log} 2>&1
         
        METAQUAST="/mnt/nfs/projects/ecosystem_biology/local_tools/IMP/dependencies/quast/metaquast.py"
        python2.7 $METAQUAST -t {THREADS} -o {OUT_DIR}/quast_{STEPp1} \
        {input[1]} \
        --max-ref-number 0 --no-check --fast -f \
        >> {log} 2>&1
        """
