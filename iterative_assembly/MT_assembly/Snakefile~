import os

# Take the current step and calculate next step target
STEP = os.environ.get("STEP", "1")
STEPp1 = int(STEP) + 1

configfile: "../config.imp.json"
#configfile: "config.iterative_MT.json"

## Parameters required from the config file
MEMCORE = os.environ.get("MEMCORE", config['memory_per_core_gb'])
MEMTOTAL = os.environ.get("MEMTOTAL", config['memory_total_gb'])
THREADS = os.environ.get("THREADS", config['threads'])

## Additional parameters
#OUT_DIR = "/scratch/users/snarayanasamy/IMP_MS_data/IMP_analysis/X310763260-iterative_assm"
#OUT_LOG = "/scratch/users/snarayanasamy/IMP_MS_data/IMP_analysis/X310763260-iterative_assm"
#INPUT_DIR = "/scratch/users/snarayanasamy/IMP_MS_data/IMP_analysis/X310763260_20151004-idba"
#TMP = "/scratch/users/snarayanasamy/IMP_MS_data/IMP_analysis/X310763260_20151004-idba/tmp"

OUT_LOG = os.environ.get("OUT_LOG", "/scratch/users/snarayanasamy/test_data-iterative_MT")
INPUT_DIR = os.environ.get("INPUT_DIR", "/scratch/users/snarayanasamy/test_output/Preprocessing")
OUT_DIR = os.environ.get("OUT_DIR", "/scratch/users/snarayanasamy/test_data-iterative_MT")
TMP = os.environ.get("TMP", "/scratch/users/snarayanasamy/test_data-iterative_MT/tmp")

### General rule for the iterative assemblies ###
rule ALL:
    input:
        "%s/MT_contigs_%s.fa" % (OUT_DIR, STEPp1),
        "%s/MT_contigs_merged_%s.fa" % (OUT_DIR, STEPp1),
        "%s/prokka_1/prokka_1.ffn" % OUT_DIR,
        "%s/metagenemark_1.ffn" % OUT_DIR,
        "%s/prokka_%s/prokka_%s.ffn" % (OUT_DIR, STEPp1, STEPp1),
        "%s/metagenemark_%s.ffn" % (OUT_DIR, STEPp1)
    shell:
        "echo 'DONE'"

### Rules for the initial assembly ###
rule INITIAL_ASSEMBLY:
    input:
        "%s/MT.R1.preprocessed.fq" % INPUT_DIR,
        "%s/MT.R2.preprocessed.fq" % INPUT_DIR,
        "%s/MT.SE.preprocessed.fq" % INPUT_DIR
    output:
        "%s/MT_contigs_1.fa" % OUT_DIR
    benchmark:
        "%s/benchmarks/INITIAL_ASSEMBLY.json" % OUT_DIR
    log:
        OUT_LOG
    priority: 50
    shell:
        """
        echo "[x] Running initial assembly [x]"
        
        echo "[x] Creating tmp folder"
        
        mkdir {TMP}
        
        TMPD=$(mktemp -d -t --tmpdir={TMP} "XXXXXX") 
                
        MAX_MEM="$(({MEMTOTAL} * 1000000000))"
        
        megahit -1 {input[0]} \
        -2 {input[1]} \
        -r {input[2]} \
        -o {OUT_DIR}/assembly_1 \
        --k-min {config[idba_ud][mink]} \
        --k-max {config[idba_ud][maxk]} \
        --k-step {config[idba_ud][step]} \
        --no-bubble \
        -t {THREADS} --cpu-only \
        -m ${{MAX_MEM}} \
        --mem-flag 1 
        cp {OUT_DIR}/assembly_1/final.contigs.fa {output}
        """

rule MERGE_INITIAL_ASSEMBLY:
    input:
        "%s/MT_contigs_1.fa" % OUT_DIR
    output:
        "%s/MT_contigs_merged_1.fa" % OUT_DIR
    benchmark:
        "%s/benchmarks/MERGE_INITIAL_ASSEMBLY.json" % OUT_DIR
    log:
        OUT_LOG
    shell:
        """
        TMP_FILE=$(mktemp --tmpdir={TMP} -t "merged_1-XXXX.fa")
        
        echo "[x] Collapsing assemblies {STEP} and {STEPp1} [x]"
        cd-hit-est -i {input[0]} -o $TMP_FILE -c 0.95 -T {THREADS}
        cat $TMP_FILE | awk '/^>/{{print \">contig_\" ++i; next}}{{print}}' > {output[0]}
        """

rule GENE_CALLING_INITIAL_ASSEMBLY:
    input:
        "%s/MT_contigs_1.fa" % OUT_DIR
    output:
        "%s/prokka_1/prokka_1.ffn" % OUT_DIR,
        "%s/metagenemark_1.ffn" % OUT_DIR
    benchmark:
        "%s/benchmarks/GENE_CALLING_INITIAL_ASSEMBLY.json" % OUT_DIR
    log:
        OUT_LOG
    shell:
        """
        prokka {input} --outdir {OUT_DIR}/prokka_1 --prefix prokka_1 --fast --force --cpus {THREADS}

        METAGENEMARK="/mnt/nfs/projects/ecosystem_biology/local_tools/IMP/dependencies/quast/libs/genemark/MetaGeneMark_v1.mod"

        gmhmmp -m $METAGENEMARK -o {OUT_DIR}/metagenemark_1.lst -a -d \
        -A {OUT_DIR}/metagenemark_1.faa \
        -D {OUT_DIR}/metagenemark_1.ffn {input}
        """
 
### General rules for iterations of assemblies ###
rule EXTRACT_UNMAPPED:
    input:
        "%s/MT_contigs_merged_%s.fa" % (OUT_DIR, STEP),
        "%s/MT.R1.preprocessed.fq" % INPUT_DIR,
        "%s/MT.R2.preprocessed.fq" % INPUT_DIR,
        "%s/MT.SE.preprocessed.fq" % INPUT_DIR
    output:
        '%s/MT.R1.unmapped_%s.fq' % (OUT_DIR, STEP),
        '%s/MT.R2.unmapped_%s.fq' % (OUT_DIR, STEP),
        '%s/MT.SE.unmapped_%s.fq' % (OUT_DIR, STEP)
    benchmark:
        "%s/benchmarks/EXTRACT_UNMAPPED_%s.json" % (OUT_DIR, STEP)
    log:
        OUT_LOG
    shell:
        """
        echo "[x] Extracting unmapped from assembly {STEP} [x]"
        echo "[x] Indexing assembly {STEP} [x]"
        bwa index {input[0]}

        echo "[x] Extracting unmapped reads [x]"

        TMP_FILE=$(mktemp --tmpdir={TMP} -t "alignment_{STEP}-XXXX.bam")
        BUFFER=$(mktemp --tmpdir={TMP} -t "alignment_buffer_{STEP}-XXXX.bam")
        bwa mem -v 1 -t {THREADS} {input[0]} {input[1]} {input[2]} | samtools view -@ {THREADS} -bS - > $TMP_FILE
        samtools merge -@ {THREADS} -u - \
        <(samtools view -@ {THREADS} -u  -f 4 -F 264 $TMP_FILE) \
        <(samtools view -@ {THREADS} -u -f 8 -F 260 $TMP_FILE) \
        <(samtools view -@ {THREADS} -u -f 12 -F 256 $TMP_FILE) | \
        samtools view -@ {THREADS} -bF 0x800 -  | samtools sort -o -@ {THREADS} -m {MEMCORE}G -n - $BUFFER | \
        bamToFastq -i stdin -fq {output[0]} -fq2 {output[1]}
        bwa mem -v 1 -t {THREADS} {input[0]} {input[3]} | \
        samtools view -@ {THREADS} -bS - | samtools view -@ {THREADS} -uf 4 - | \
        bamToFastq -i stdin -fq {output[2]}
        """

rule ASSEMBLY:
    input:
        "%s/MT.R1.unmapped_%s.fq" % (OUT_DIR, STEP),
        "%s/MT.R2.unmapped_%s.fq" % (OUT_DIR, STEP),
        "%s/MT.SE.unmapped_%s.fq" % (OUT_DIR, STEP)
    output:
        "%s/MT_contigs_%s.fa" % (OUT_DIR, STEPp1)
    benchmark:
        "%s/benchmarks/ASSEMBLY_%s.json" % (OUT_DIR, STEPp1)
    log:
        OUT_LOG
    shell:
        """
        MAX_MEM="$(({MEMTOTAL} * 1000000000))"
        
        megahit -1 {input[0]} \
        -2 {input[1]} \
        -r {input[2]} \
        -o {OUT_DIR}/assembly_{STEPp1} \
        --k-min {config[idba_ud][mink]} \
        --k-max {config[idba_ud][maxk]} \
        --k-step {config[idba_ud][step]} \
        --no-bubble \
        -t {THREADS} --cpu-only \
        -m ${{MAX_MEM}} \
        --mem-flag 1 
        cp {OUT_DIR}/assembly_{STEPp1}/final.contigs.fa {output}
        """

rule MERGE_ASSEMBLIES:
    input:
        "%s/MT_contigs_merged_%s.fa" % (OUT_DIR, STEP),
        "%s/MT_contigs_%s.fa" % (OUT_DIR, STEPp1)
    output:
        "%s/MT_contigs_cat_%s.fa" % (OUT_DIR, STEPp1),
        "%s/MT_contigs_merged_%s.fa" % (OUT_DIR, STEPp1)
    benchmark:
        "%s/benchmarks/MERGE_ASSEMBLIES_%s.json" % (OUT_DIR, STEPp1)
    log:
        OUT_LOG
    shell:
        """
        TMP_FILE=$(mktemp --tmpdir={TMP} -t "merged_{STEPp1}-XXXX.fa")

        cat {input} > {output[0]}
        echo "[x] Collapsing assemblies {STEP} and {STEPp1} [x]"
        cd-hit-est -i {output[0]} -o $TMP_FILE -c 0.95 -T {THREADS}
        cat $TMP_FILE | awk '/^>/{{print \">contig_\" ++i; next}}{{print}}' > {output[1]}
        """

rule GENE_CALLING:
    input:
        "%s/MT_contigs_merged_%s.fa" % (OUT_DIR, STEPp1)
    output:
        "%s/prokka_%s/prokka_%s.ffn" % (OUT_DIR, STEPp1, STEPp1),
        "%s/metagenemark_%s.ffn" % (OUT_DIR, STEPp1)
    benchmark:
        "%s/benchmarks/GENE_CALLING_%s.json" % (OUT_DIR, STEPp1)
    log:
        OUT_LOG
    shell:
        """
        prokka {input} --outdir {OUT_DIR}/prokka_{STEPp1} --prefix prokka_{STEPp1} --fast --force --cpus {THREADS}

        METAGENEMARK="/mnt/nfs/projects/ecosystem_biology/local_tools/IMP/dependencies/quast/libs/genemark/MetaGeneMark_v1.mod"

        gmhmmp -m $METAGENEMARK -o {OUT_DIR}/metagenemark_{STEPp1}.lst -a -d \
        -A {OUT_DIR}/metagenemark_{STEPp1}.faa \
        -D {OUT_DIR}/metagenemark_{STEPp1}.ffn {input}
        """

